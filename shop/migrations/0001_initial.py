# Generated by Django 3.0.8 on 2020-08-10 10:01

import common.blocks
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.contrib.routable_page.models
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.embeds.blocks
import wagtail.images.blocks
import wagtail.search.index
import wagtailmetadata.models
import wagtailstreamforms.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0022_uploadedimage'),
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('wagtaildocs', '0010_document_file_hash'),
        ('wagtailcore', '0045_assign_unlock_grouppagepermission'),
    ]

    operations = [
        migrations.CreateModel(
            name='CartPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('header', wagtail.core.fields.StreamField([('header', wagtail.core.blocks.StructBlock([('button_text', wagtail.core.blocks.CharBlock(label='Button Text', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('external_link', wagtail.core.blocks.URLBlock(help_text='External Link', label='URL', required=False)), ('show_main_menu', wagtail.core.blocks.BooleanBlock(default=True, required=False))])), ('empty', common.blocks.EmptyBlock())], blank=True, null=True)),
                ('body', wagtail.core.fields.StreamField([('heading', wagtail.core.blocks.CharBlock(classname='full title')), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('HTML', wagtail.core.blocks.RawHTMLBlock()), ('product', wagtail.core.blocks.StructBlock([('page', wagtail.core.blocks.PageChooserBlock(page_type=['shop.Product'], required=True)), ('display_type', wagtail.core.blocks.ChoiceBlock(choices=[('lean', 'Lean'), ('details', 'Details')])), ('action_text', wagtail.core.blocks.CharBlock(default='Buy'))])), ('line', common.blocks.HRBlock())], blank=True, null=True)),
                ('description', wagtail.core.fields.StreamField([('heading', wagtail.core.blocks.CharBlock(classname='full title')), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('HTML', wagtail.core.blocks.RawHTMLBlock())], blank=True, null=True)),
                ('thankyou_body', wagtail.core.fields.StreamField([('heading', wagtail.core.blocks.CharBlock(classname='full title')), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('HTML', wagtail.core.blocks.RawHTMLBlock()), ('product', wagtail.core.blocks.StructBlock([('page', wagtail.core.blocks.PageChooserBlock(page_type=['shop.Product'], required=True)), ('display_type', wagtail.core.blocks.ChoiceBlock(choices=[('lean', 'Lean'), ('details', 'Details')])), ('action_text', wagtail.core.blocks.CharBlock(default='Buy'))])), ('line', common.blocks.HRBlock())], blank=True, null=True)),
                ('footer', wagtail.core.fields.StreamField([('footer', wagtail.core.blocks.StructBlock([('body', wagtail.core.blocks.StreamBlock([('heading', wagtail.core.blocks.CharBlock(classname='full title')), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('form', wagtail.core.blocks.StructBlock([('form', wagtailstreamforms.blocks.FormChooserBlock()), ('form_action', wagtail.core.blocks.CharBlock(help_text='The form post action. "" or "." for the current page or a url', required=False)), ('form_reference', wagtailstreamforms.blocks.InfoBlock(help_text='This form will be given a unique reference once saved', required=False))])), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False)), ('HTML', wagtail.core.blocks.RawHTMLBlock())], blank=True, null=True))])), ('empty', common.blocks.EmptyBlock())], blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, wagtailmetadata.models.MetadataMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('username', models.CharField(blank=True, max_length=255, null=True, verbose_name='Username')),
                ('unique_items', models.IntegerField(blank=True, null=True, verbose_name='Unique Items')),
                ('quantity', models.IntegerField(default=1, verbose_name='Quantity')),
                ('total', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_gateway', models.CharField(blank=True, max_length=255, null=True, verbose_name='Payment Gateway')),
                ('ref', models.CharField(blank=True, max_length=255, null=True, verbose_name='Payment Reference')),
                ('is_delivered', models.BooleanField(default=False)),
                ('is_shipped', models.BooleanField(default=False)),
                ('is_received', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['title'],
                'abstract': False,
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('username', models.CharField(blank=True, max_length=255, null=True, verbose_name='Username')),
                ('quantity', models.IntegerField(default=1, verbose_name='Quantity')),
                ('total', models.DecimalField(decimal_places=2, max_digits=10)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_gateway', models.CharField(blank=True, max_length=255, null=True, verbose_name='Payment Gateway')),
                ('ref', models.CharField(blank=True, max_length=255, null=True, verbose_name='Payment Reference')),
                ('is_delivered', models.BooleanField(default=False)),
                ('is_shipped', models.BooleanField(default=False)),
                ('is_received', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('date', models.DateField(verbose_name='Post date')),
                ('sku', models.CharField(max_length=255)),
                ('short_description', models.TextField(blank=True, null=True)),
                ('description', wagtail.core.fields.RichTextField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('old_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_featured', models.BooleanField(blank=True, default=False, null=True)),
                ('is_unlisted', models.BooleanField(blank=True, default=False, null=True)),
                ('is_downloadable', models.BooleanField(blank=True, default=False, null=True)),
                ('is_available', models.BooleanField(default=True)),
                ('star_ticket', models.BooleanField(blank=True, default=False, null=True)),
                ('product_type', models.CharField(choices=[('default', 'Default'), ('ticket', 'Ticket')], default='default', max_length=20)),
                ('seat', models.IntegerField(blank=True, null=True)),
                ('is_in_stock', models.BooleanField(default=True)),
                ('ticket_class', models.CharField(blank=True, max_length=50, null=True)),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.Document')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('search_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Search image')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtailmetadata.models.MetadataMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('icon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'verbose_name': 'product category',
                'verbose_name_plural': 'product categories',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ShopSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_currency_symbol', models.CharField(default='₦', help_text='Default should be naira symbol', max_length=3)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShopIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('header', wagtail.core.fields.StreamField([('header', wagtail.core.blocks.StructBlock([('button_text', wagtail.core.blocks.CharBlock(label='Button Text', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('external_link', wagtail.core.blocks.URLBlock(help_text='External Link', label='URL', required=False)), ('show_main_menu', wagtail.core.blocks.BooleanBlock(default=True, required=False))])), ('empty', common.blocks.EmptyBlock())], blank=True, null=True)),
                ('body', wagtail.core.fields.StreamField([('spotlight', wagtail.core.blocks.StructBlock([('photo', wagtail.images.blocks.ImageChooserBlock(required=False)), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False)), ('video', wagtail.core.blocks.URLBlock(help_text='RTSP Endpoint', label='video stream', required=False)), ('video_min_height', wagtail.core.blocks.CharBlock(default='300px', required=False)), ('biography', wagtail.core.blocks.RichTextBlock(required=True)), ('heading', wagtail.core.blocks.CharBlock(label='Heading', required=False)), ('title', wagtail.core.blocks.CharBlock(label='Title', required=True)), ('external_link', wagtail.core.blocks.URLBlock(help_text='URL to external page', label='External Link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False))])), ('featured_products', wagtail.core.blocks.StructBlock([('products', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('picture', wagtail.images.blocks.ImageChooserBlock(required=True)), ('title', wagtail.core.blocks.CharBlock(label='Title', required=True)), ('discount', wagtail.core.blocks.RawHTMLBlock(label='Discount text', required=False)), ('external_link', wagtail.core.blocks.URLBlock(help_text='URL to external page', label='External Link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('amount', wagtail.core.blocks.RawHTMLBlock(required=True))], value_class=common.blocks.QuickLinkValue))), ('section_text', wagtail.core.blocks.RawHTMLBlock(label='Section text', required=False))])), ('featured_contents', wagtail.core.blocks.StructBlock([('spotlight', wagtail.core.blocks.StructBlock([('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('video', wagtail.core.blocks.URLBlock(help_text='RSTP Video Feed', label='Stream URL', required=False)), ('video_min_height', wagtail.core.blocks.CharBlock(default='300px', required=False)), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False)), ('title', wagtail.core.blocks.CharBlock(label='Title', required=True)), ('external_link', wagtail.core.blocks.URLBlock(label='external_link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('creators', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('external_link', wagtail.core.blocks.URLBlock(label='external_link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False))], value_class=common.blocks.QuickLinkValue))), ('date', wagtail.core.blocks.DateBlock(required=False))], value_class=common.blocks.QuickLinkValue)), ('promotedList', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Title', required=True)), ('external_link', wagtail.core.blocks.URLBlock(label='external_link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('author', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('external_link', wagtail.core.blocks.URLBlock(label='external_link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False))], value_class=common.blocks.QuickLinkValue)), ('date', wagtail.core.blocks.DateBlock(required=False)), ('picture', wagtail.images.blocks.ImageChooserBlock(required=False))], value_class=common.blocks.QuickLinkValue))), ('section_text', wagtail.core.blocks.RawHTMLBlock(label='Section text', required=False)), ('padding_type', wagtail.core.blocks.ChoiceBlock(choices=[('uk-padding-large', 'Large'), ('uk-padding-small', 'Small')], icon='media')), ('promoted_events', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('event', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Title', required=True)), ('description', wagtail.core.blocks.CharBlock(label='Description', required=True)), ('date', wagtail.core.blocks.DateBlock()), ('time', wagtail.core.blocks.TimeBlock(required=True)), ('display_type', wagtail.core.blocks.ChoiceBlock(choices=[('text', 'Text'), ('image', 'Image'), ('video', 'video')], icon='cup')), ('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False)), ('video_min_height', wagtail.core.blocks.CharBlock(default='300px', required=False)), ('external_link', wagtail.core.blocks.URLBlock(label='external_link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('link_text', wagtail.core.blocks.CharBlock(help_text='e.g Register Now', label='Button Text', required=True))], required=False))])))])), ('promoted_news_list', wagtail.core.blocks.StructBlock([('promotedList', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Title', required=True)), ('external_link', wagtail.core.blocks.URLBlock(label='external_link', required=False)), ('description', wagtail.core.blocks.CharBlock(label='Description', required=True)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('author', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('external_link', wagtail.core.blocks.URLBlock(label='external_link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False))], value_class=common.blocks.QuickLinkValue)), ('date', wagtail.core.blocks.DateBlock(required=False)), ('picture', wagtail.images.blocks.ImageChooserBlock(required=False))], value_class=common.blocks.QuickLinkValue))), ('section_text', wagtail.core.blocks.RawHTMLBlock(label='Section text', required=False)), ('layout', wagtail.core.blocks.ChoiceBlock(choices=[('uk-width-2-3@m', '80% Width in Container'), ('nop', 'Fullwidth')], icon='media')), ('align', wagtail.core.blocks.ChoiceBlock(choices=[('uk-align-center', 'Middle'), ('uk-align-left', 'Left')], icon='media'))])), ('promoted_spotlight_with_list', wagtail.core.blocks.StructBlock([('spotlight', wagtail.core.blocks.StructBlock([('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('video', wagtail.core.blocks.URLBlock(help_text='RSTP Video Feed', label='Stream URL', required=False)), ('video_min_height', wagtail.core.blocks.CharBlock(default='300px', required=False)), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False)), ('title', wagtail.core.blocks.CharBlock(label='Title', required=True)), ('external_link', wagtail.core.blocks.URLBlock(label='external_link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('creators', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('external_link', wagtail.core.blocks.URLBlock(label='external_link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False))], value_class=common.blocks.QuickLinkValue))), ('date', wagtail.core.blocks.DateBlock(required=False))], value_class=common.blocks.QuickLinkValue)), ('promotedList', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Title', required=True)), ('external_link', wagtail.core.blocks.URLBlock(label='external_link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('author', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('external_link', wagtail.core.blocks.URLBlock(label='external_link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False))], value_class=common.blocks.QuickLinkValue)), ('date', wagtail.core.blocks.DateBlock(required=False)), ('picture', wagtail.images.blocks.ImageChooserBlock(required=False))], value_class=common.blocks.QuickLinkValue))), ('padding_type', wagtail.core.blocks.ChoiceBlock(choices=[('uk-padding-large', 'Large'), ('uk-padding-small', 'Small')], icon='media'))])), ('heading', wagtail.core.blocks.CharBlock(classname='full title')), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('form', wagtail.core.blocks.StructBlock([('form', wagtailstreamforms.blocks.FormChooserBlock()), ('form_action', wagtail.core.blocks.CharBlock(help_text='The form post action. "" or "." for the current page or a url', required=False)), ('form_reference', wagtailstreamforms.blocks.InfoBlock(help_text='This form will be given a unique reference once saved', required=False))])), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('HTML', wagtail.core.blocks.RawHTMLBlock()), ('Carousel', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Title', required=False)), ('items', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('overlay_text', wagtail.core.blocks.CharBlock(label='Overlay Text', required=True)), ('description', wagtail.core.blocks.CharBlock(required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('external_link', wagtail.core.blocks.URLBlock(help_text='External Link', label='URL', required=False)), ('is_active', wagtail.core.blocks.BooleanBlock(default=False, required=False)), ('display_type', wagtail.core.blocks.ChoiceBlock(choices=[('text', 'Text'), ('image', 'Image'), ('video', 'Video'), ('event', 'Event'), ('product', 'Product')], icon='cup')), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False))], value_class=common.blocks.QuickLinkValue))), ('section_text', wagtail.core.blocks.RawHTMLBlock(label='Section text', required=False)), ('video_min_height', wagtail.core.blocks.CharBlock(default='300px', required=False))])), ('TwoColGridImage', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Title', required=False)), ('video_min_height', wagtail.core.blocks.CharBlock(default='300px', required=False)), ('items', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False)), ('title', wagtail.core.blocks.CharBlock(label='Title', required=False)), ('vertical_text', wagtail.core.blocks.RawHTMLBlock(label='vertical_text', required=False)), ('external_link', wagtail.core.blocks.URLBlock(help_text='URL to external page', label='External Link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False))], value_class=common.blocks.QuickLinkValue))), ('section_text', wagtail.core.blocks.RawHTMLBlock(label='Section text', required=False))])), ('TwoColTextLeft', wagtail.core.blocks.StructBlock([('photo', wagtail.images.blocks.ImageChooserBlock(required=False)), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False)), ('video_min_height', wagtail.core.blocks.CharBlock(default='300px', required=False)), ('text', wagtail.core.blocks.RichTextBlock(required=True)), ('heading', wagtail.core.blocks.CharBlock(label='Heading', required=False)), ('external_link', wagtail.core.blocks.URLBlock(help_text='URL to external page', label='External Link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False))])), ('TwoColTextRight', wagtail.core.blocks.StructBlock([('photo', wagtail.images.blocks.ImageChooserBlock(required=False)), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False)), ('video_min_height', wagtail.core.blocks.CharBlock(default='300px', required=False)), ('text', wagtail.core.blocks.RichTextBlock(required=True)), ('heading', wagtail.core.blocks.CharBlock(label='Heading', required=False)), ('external_link', wagtail.core.blocks.URLBlock(help_text='URL to external page', label='External Link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('vimeo', wagtail.core.blocks.URLBlock(help_text='Vimeo', label='Vimeo URL', required=False))])), ('Introduce', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Title', required=False)), ('align_title', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'Left'), ('right', 'Right'), ('center', 'Center')], icon='media')), ('intro', wagtail.core.blocks.RawHTMLBlock(label='Intro text', required=False)), ('align_intro', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'Left'), ('right', 'Right'), ('center', 'Center'), ('justify', 'Justfy')], icon='media'))])), ('product', wagtail.core.blocks.StructBlock([('page', wagtail.core.blocks.PageChooserBlock(page_type=['shop.Product'], required=True)), ('display_type', wagtail.core.blocks.ChoiceBlock(choices=[('lean', 'Lean'), ('details', 'Details')])), ('action_text', wagtail.core.blocks.CharBlock(default='Buy'))])), ('line', common.blocks.HRBlock())], blank=True, null=True)),
                ('footer', wagtail.core.fields.StreamField([('footer', wagtail.core.blocks.StructBlock([('body', wagtail.core.blocks.StreamBlock([('heading', wagtail.core.blocks.CharBlock(classname='full title')), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('form', wagtail.core.blocks.StructBlock([('form', wagtailstreamforms.blocks.FormChooserBlock()), ('form_action', wagtail.core.blocks.CharBlock(help_text='The form post action. "" or "." for the current page or a url', required=False)), ('form_reference', wagtailstreamforms.blocks.InfoBlock(help_text='This form will be given a unique reference once saved', required=False))])), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False)), ('HTML', wagtail.core.blocks.RawHTMLBlock())], blank=True, null=True))])), ('empty', common.blocks.EmptyBlock())], blank=True, null=True)),
                ('search_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Search image')),
            ],
            options={
                'verbose_name': 'Shop Home',
                'verbose_name_plural': 'Shop Home',
            },
            bases=(wagtailmetadata.models.MetadataMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='ProductTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='shop.Product')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_producttag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductSpecificationField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=255)),
                ('option', models.CharField(blank=True, max_length=500, null=True)),
                ('product', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='specifications', to='shop.Product')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductPageProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_categories', to='shop.Product')),
                ('product_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_pages', to='shop.ProductCategory')),
            ],
        ),
        migrations.CreateModel(
            name='ProductGalleryImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('caption', models.CharField(blank=True, max_length=250)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_images', to='shop.Product')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductCustomField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=255)),
                ('options', models.CharField(blank=True, max_length=500, null=True)),
                ('product', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_fields', to='shop.Product')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
