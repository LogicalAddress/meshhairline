# Generated by Django 3.0.8 on 2020-08-10 10:01

import common.blocks
from django.db import migrations, models
import django.db.models.deletion
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.embeds.blocks
import wagtail.images.blocks
import wagtailmetadata.models
import wagtailstreamforms.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0045_assign_unlock_grouppagepermission'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agenda',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('time_from', models.TimeField(blank=True, null=True)),
                ('time_to', models.TimeField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('session_type', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Agenda',
                'verbose_name_plural': 'Agenda',
            },
        ),
        migrations.CreateModel(
            name='AgendaSpeakerRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='EventAgenda',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('short_description', models.TextField(blank=True, null=True)),
                ('description', wagtail.core.fields.RichTextField(blank=True, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('duration', models.IntegerField()),
                ('location', models.CharField(blank=True, max_length=50, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('event_type', models.CharField(choices=[('concert', 'Concert'), ('conference', 'Conference')], default='concert', max_length=50)),
                ('layout', models.CharField(choices=[('default', 'Default')], default='default', max_length=20)),
                ('header', wagtail.core.fields.StreamField([('header', wagtail.core.blocks.StructBlock([('button_text', wagtail.core.blocks.CharBlock(label='Button Text', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('external_link', wagtail.core.blocks.URLBlock(help_text='External Link', label='URL', required=False)), ('show_main_menu', wagtail.core.blocks.BooleanBlock(default=True, required=False))])), ('empty', common.blocks.EmptyBlock())], blank=True, null=True)),
                ('body', wagtail.core.fields.StreamField([('spotlight', wagtail.core.blocks.StructBlock([('photo', wagtail.images.blocks.ImageChooserBlock(required=False)), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False)), ('video', wagtail.core.blocks.URLBlock(help_text='RTSP Endpoint', label='video stream', required=False)), ('video_min_height', wagtail.core.blocks.CharBlock(default='300px', required=False)), ('biography', wagtail.core.blocks.RichTextBlock(required=True)), ('heading', wagtail.core.blocks.CharBlock(label='Heading', required=False)), ('title', wagtail.core.blocks.CharBlock(label='Title', required=True)), ('external_link', wagtail.core.blocks.URLBlock(help_text='URL to external page', label='External Link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False))])), ('featured_products', wagtail.core.blocks.StructBlock([('products', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('picture', wagtail.images.blocks.ImageChooserBlock(required=True)), ('title', wagtail.core.blocks.CharBlock(label='Title', required=True)), ('discount', wagtail.core.blocks.RawHTMLBlock(label='Discount text', required=False)), ('external_link', wagtail.core.blocks.URLBlock(help_text='URL to external page', label='External Link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('amount', wagtail.core.blocks.RawHTMLBlock(required=True))], value_class=common.blocks.QuickLinkValue))), ('section_text', wagtail.core.blocks.RawHTMLBlock(label='Section text', required=False))])), ('heading', wagtail.core.blocks.CharBlock(classname='full title')), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('form', wagtail.core.blocks.StructBlock([('form', wagtailstreamforms.blocks.FormChooserBlock()), ('form_action', wagtail.core.blocks.CharBlock(help_text='The form post action. "" or "." for the current page or a url', required=False)), ('form_reference', wagtailstreamforms.blocks.InfoBlock(help_text='This form will be given a unique reference once saved', required=False))])), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('HTML', wagtail.core.blocks.RawHTMLBlock()), ('Carousel', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Title', required=False)), ('items', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('overlay_text', wagtail.core.blocks.CharBlock(label='Overlay Text', required=True)), ('description', wagtail.core.blocks.CharBlock(required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('external_link', wagtail.core.blocks.URLBlock(help_text='External Link', label='URL', required=False)), ('is_active', wagtail.core.blocks.BooleanBlock(default=False, required=False)), ('display_type', wagtail.core.blocks.ChoiceBlock(choices=[('text', 'Text'), ('image', 'Image'), ('video', 'Video'), ('event', 'Event'), ('product', 'Product')], icon='cup')), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False))], value_class=common.blocks.QuickLinkValue))), ('section_text', wagtail.core.blocks.RawHTMLBlock(label='Section text', required=False)), ('video_min_height', wagtail.core.blocks.CharBlock(default='300px', required=False))])), ('TwoColGridImage', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Title', required=False)), ('video_min_height', wagtail.core.blocks.CharBlock(default='300px', required=False)), ('items', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('picture', wagtail.images.blocks.ImageChooserBlock(required=False)), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False)), ('title', wagtail.core.blocks.CharBlock(label='Title', required=False)), ('vertical_text', wagtail.core.blocks.RawHTMLBlock(label='vertical_text', required=False)), ('external_link', wagtail.core.blocks.URLBlock(help_text='URL to external page', label='External Link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False))], value_class=common.blocks.QuickLinkValue))), ('section_text', wagtail.core.blocks.RawHTMLBlock(label='Section text', required=False))])), ('TwoColTextLeft', wagtail.core.blocks.StructBlock([('photo', wagtail.images.blocks.ImageChooserBlock(required=False)), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False)), ('video_min_height', wagtail.core.blocks.CharBlock(default='300px', required=False)), ('text', wagtail.core.blocks.RichTextBlock(required=True)), ('heading', wagtail.core.blocks.CharBlock(label='Heading', required=False)), ('external_link', wagtail.core.blocks.URLBlock(help_text='URL to external page', label='External Link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False))])), ('TwoColTextRight', wagtail.core.blocks.StructBlock([('photo', wagtail.images.blocks.ImageChooserBlock(required=False)), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False)), ('video_min_height', wagtail.core.blocks.CharBlock(default='300px', required=False)), ('text', wagtail.core.blocks.RichTextBlock(required=True)), ('heading', wagtail.core.blocks.CharBlock(label='Heading', required=False)), ('external_link', wagtail.core.blocks.URLBlock(help_text='URL to external page', label='External Link', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(help_text='Link a Page', label='page', required=False)), ('vimeo', wagtail.core.blocks.URLBlock(help_text='Vimeo', label='Vimeo URL', required=False))])), ('Introduce', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Title', required=False)), ('align_title', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'Left'), ('right', 'Right'), ('center', 'Center')], icon='media')), ('intro', wagtail.core.blocks.RawHTMLBlock(label='Intro text', required=False)), ('align_intro', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'Left'), ('right', 'Right'), ('center', 'Center'), ('justify', 'Justfy')], icon='media'))])), ('ticket', wagtail.core.blocks.StructBlock([('button_text', wagtail.core.blocks.CharBlock(default='Buy Ticket')), ('tickets', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('page', wagtail.core.blocks.PageChooserBlock(page_type=['shop.Product'], required=True))])))]))], blank=True, null=True)),
                ('footer', wagtail.core.fields.StreamField([('footer', wagtail.core.blocks.StructBlock([('body', wagtail.core.blocks.StreamBlock([('heading', wagtail.core.blocks.CharBlock(classname='full title')), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('form', wagtail.core.blocks.StructBlock([('form', wagtailstreamforms.blocks.FormChooserBlock()), ('form_action', wagtail.core.blocks.CharBlock(help_text='The form post action. "" or "." for the current page or a url', required=False)), ('form_reference', wagtailstreamforms.blocks.InfoBlock(help_text='This form will be given a unique reference once saved', required=False))])), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False)), ('HTML', wagtail.core.blocks.RawHTMLBlock())], blank=True, null=True))])), ('empty', common.blocks.EmptyBlock())], blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtailmetadata.models.MetadataMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='EventSponsor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventTicket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FeaturedGuest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Speaker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('job_title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('external_link', models.URLField(blank=True, null=True)),
                ('twitter', models.CharField(blank=True, max_length=255, null=True)),
                ('linkedin', models.CharField(blank=True, max_length=255, null=True)),
                ('facebook', models.CharField(blank=True, max_length=255, null=True)),
                ('instagram', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Speaker',
                'verbose_name_plural': 'Speakers',
            },
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('external_link', models.URLField(blank=True, null=True)),
                ('twitter', models.CharField(blank=True, max_length=255, null=True)),
                ('linkedin', models.CharField(blank=True, max_length=255, null=True)),
                ('facebook', models.CharField(blank=True, max_length=255, null=True)),
                ('instagram', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Sponsor',
                'verbose_name_plural': 'Sponsors',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_title', models.CharField(blank=True, max_length=255, null=True)),
                ('event_title', models.CharField(blank=True, max_length=255, null=True)),
                ('user_name', models.CharField(blank=True, max_length=255, null=True)),
                ('ticket_class', models.CharField(blank=True, max_length=50, null=True)),
                ('payment_type', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.FloatField(blank=True, max_length=255, null=True)),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='event.EventPage')),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
            },
        ),
    ]
